# Production Docker Compose for CoderStew Website
# Optimized for Unraid deployment with security, performance, and monitoring

services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.prod
      target: production
    image: coderstew/website:latest
    container_name: coderstew_app_prod
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage/app
      - app_logs:/var/www/html/storage/logs
      - ./backend/.env.production:/var/www/html/.env
    environment:
      - CONTAINER_ROLE=app
    networks:
      - coderstew_network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "php-fpm-healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.prod
      target: production
    image: coderstew/website:latest
    container_name: coderstew_queue_prod
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage/app
      - app_logs:/var/www/html/storage/logs
      - ./backend/.env.production:/var/www/html/.env
    environment:
      - CONTAINER_ROLE=queue
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    networks:
      - coderstew_network
    depends_on:
      - db
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.prod
      target: production
    image: coderstew/website:latest
    container_name: coderstew_scheduler_prod
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage/app
      - app_logs:/var/www/html/storage/logs
      - ./backend/.env.production:/var/www/html/.env
    environment:
      - CONTAINER_ROLE=scheduler
    command: supercrond -l 2 -p 60 -c /etc/crontabs/www
    networks:
      - coderstew_network
    depends_on:
      - db
      - redis
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Web Server
  web:
    image: nginx:1.25-alpine
    container_name: coderstew_web_prod
    restart: unless-stopped
    volumes:
      - ./backend/public:/var/www/html/public:ro
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - web_cache:/var/cache/nginx
      - web_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - coderstew_network
      - traefik_public
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_public"
      
      # Main website routing
      - "traefik.http.routers.coderstew-web.rule=Host(`coderstew.com`, `www.coderstew.com`)"
      - "traefik.http.routers.coderstew-web.tls=true"
      - "traefik.http.routers.coderstew-web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.coderstew-web.entrypoints=websecure"
      - "traefik.http.routers.coderstew-web.middlewares=redirect-www@file,security-headers@file,rate-limit@file,gzip-compress@file"
      
      # API routing with different rate limiting
      - "traefik.http.routers.coderstew-api.rule=Host(`coderstew.com`, `www.coderstew.com`) && PathPrefix(`/api`)"
      - "traefik.http.routers.coderstew-api.tls=true"
      - "traefik.http.routers.coderstew-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.coderstew-api.entrypoints=websecure"
      - "traefik.http.routers.coderstew-api.middlewares=redirect-www@file,security-headers@file,api-rate-limit@file,gzip-compress@file"
      - "traefik.http.routers.coderstew-api.priority=100"
      
      # Admin panel routing
      - "traefik.http.routers.coderstew-admin.rule=Host(`coderstew.com`, `www.coderstew.com`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.coderstew-admin.tls=true"
      - "traefik.http.routers.coderstew-admin.tls.certresolver=letsencrypt"
      - "traefik.http.routers.coderstew-admin.entrypoints=websecure"
      - "traefik.http.routers.coderstew-admin.middlewares=redirect-www@file,security-headers@file,gzip-compress@file"
      - "traefik.http.routers.coderstew-admin.priority=200"
      
      # Service configuration
      - "traefik.http.services.coderstew-web.loadbalancer.server.port=80"
      - "traefik.http.services.coderstew-web.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.coderstew-web.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.coderstew-web.loadbalancer.healthcheck.timeout=10s"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # MySQL Database
  db:
    image: mysql:8.0
    container_name: coderstew_db_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: coderstew_prod
      MYSQL_USER: coderstew_prod
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    volumes:
      - db_data:/var/lib/mysql
      - db_logs:/var/log/mysql
      - ./docker/mysql/production.cnf:/etc/mysql/conf.d/production.cnf:ro
    secrets:
      - mysql_root_password
      - mysql_password
    networks:
      - coderstew_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Sessions
  redis:
    image: redis:7.2-alpine
    container_name: coderstew_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - coderstew_network
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse Proxy with SSL
  traefik:
    image: traefik:v3.0
    container_name: coderstew_traefik_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik_certs:/etc/traefik/certs
      - traefik_logs:/var/log/traefik
    environment:
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=admin@coderstew.com
    networks:
      - coderstew_network
      - traefik_public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.coderstew.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service
  backup:
    image: alpine:3.18
    container_name: coderstew_backup_prod
    restart: unless-stopped
    volumes:
      - db_data:/backup/database:ro
      - app_storage:/backup/storage:ro
      - app_logs:/backup/logs:ro
      - backup_data:/backup/archives
      - ./docker/backup/backup.sh:/usr/local/bin/backup.sh:ro
      - ./docker/backup/crontab:/etc/crontabs/root:ro
      - ./docker/backup/entrypoint.sh:/entrypoint.sh:ro
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - TZ=UTC
    networks:
      - coderstew_network
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - mysql_root_password
    command: /entrypoint.sh
    healthcheck:
      test: ["CMD", "/usr/local/bin/backup.sh", "health"]
      interval: 300s
      timeout: 30s
      retries: 2
      start_period: 60s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: coderstew_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - coderstew_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: coderstew_loki_prod
    restart: unless-stopped
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    networks:
      - coderstew_network
    command: -config.file=/etc/loki/loki.yml
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

networks:
  coderstew_network:
    driver: bridge
    internal: true
  traefik_public:
    external: true

volumes:
  db_data:
    driver: local
  db_logs:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_logs:
    driver: local
  web_cache:
    driver: local
  web_logs:
    driver: local
  traefik_certs:
    driver: local
  traefik_logs:
    driver: local
  backup_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt